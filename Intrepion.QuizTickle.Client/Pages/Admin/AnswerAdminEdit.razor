@page "/admin/answer-edit"
@page "/admin/answer-edit/{id:guid}"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IAnswerAdminService AnswerAdminService

@* InjectionCodePlaceholder *@
@* @inject IToDoListAdminService ToDoListAdminService *@

  @if (Id.Equals(Guid.Empty))
  {
    <PageTitle>Answer Creation</PageTitle>
  }
  else
  {
    <PageTitle>Answer Modification</PageTitle>
  }

<section>
  @if (Id.Equals(Guid.Empty))
  {
    <h1>Answer Creation</h1>
  }
  else
  {
    <h1>Answer Modification</h1>
  }
  <article>
    <EditForm class="container" Model="answerAdminEditModel" OnSubmit="HandleSubmit">

      @* EditRowCodePlaceholder *@

      <div class="row">
        <div class="col">
          @if (!Id.Equals(Guid.Empty))
          {
            <button @onclick="Remove" type="button" class="btn btn-danger">Remove</button>
          }
        </div>
        <div class="col">
          <a href="/admin/answer-list">Cancel</a>
          @if (Id.Equals(Guid.Empty))
          {
            <button type="submit" class="btn btn-primary">Create</button>
          }
          else
          {
            <button type="submit" class="btn btn-primary">Modify</button>
          }
         </div>
      </div>
    </EditForm>
  </article>
</section>

@code {
  [Parameter]
  public Guid Id { get; set; }
  AnswerAdminEditModel answerAdminEditModel { get; set; } = new AnswerAdminEditModel();

  @* ListDeclarationCodePlaceholder *@

  protected override async Task OnInitializedAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    await base.OnInitializedAsync();

    @* OnInitializedCodePlaceholder *@
  }

  protected override async Task OnParametersSetAsync()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    var databaseAnswerAdminDto = await AnswerAdminService.GetByIdAsync(userName, Id);

    if (databaseAnswerAdminDto == null)
    {
      answerAdminEditModel = new AnswerAdminEditModel();
    }
    else
    {
      answerAdminEditModel = AnswerAdminEditModel.FromAnswerAdminDto(databaseAnswerAdminDto);
    }
  }

  async Task HandleSubmit()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name;

    if (userName == null)
    {
      return;
    }

    @* RequiredPropertyPlaceholder *@

    @* if (string.IsNullOrWhiteSpace(answerAdminEditModel.Name))
    {
      return;
    } *@

    var answerAdminDto = AnswerAdminEditModel.ToAnswerAdminDto(answerAdminEditModel);
    answerAdminDto.ApplicationUserName = userName;

    if (Id.Equals(Guid.Empty))
    {
      var newAnswerAdminDto = await AnswerAdminService.AddAsync(answerAdminDto);

      if (newAnswerAdminDto == null)
      {
        return;
      }

      NavigationManager.NavigateTo($"/admin/answer-edit/{newAnswerAdminDto.Id}");
    }
    else
    {
      await AnswerAdminService.EditAsync(answerAdminDto);
    }
  }

  async Task Remove()
  {
    var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    var userName = authState.User.Identity?.Name!;

    if (userName == null)
    {
      return;
    }

    if (Id.Equals(Guid.Empty))
    {
      return;
    }

    await AnswerAdminService.DeleteAsync(userName, Id);
    NavigationManager.NavigateTo($"/admin/answer-list");
  }

  @* OnChangeCodePlaceholder *@
}
